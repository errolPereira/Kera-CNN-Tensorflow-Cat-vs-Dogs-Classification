# -*- coding: utf-8 -*-
"""CatsVsDogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emoQ6op8gr_EqGm4I_yLWxOeZygrKHOQ
"""

import os

import zipfile
from tensorflow.keras import layers
from tensorflow.keras import Model

!wget --no-check-certificate \
    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \
    -O /tmp/cats_and_dogs_filtered.zip

#Extracting the zip file in the tmp folder
local_zip = '/tmp/cats_and_dogs_filtered.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

#base directory
base_dir = '/tmp/cats_and_dogs_filtered'
#train directory
train_dir = os.path.join(base_dir, 'train')
#test directory
validation_dir = os.path.join(base_dir, 'validation')

# Directory with our training cat pictures
train_cats_dir = os.path.join(train_dir, 'cats')

# Directory with our training dog pictures
train_dogs_dir = os.path.join(train_dir, 'dogs')

# Directory with our validation cat pictures
validation_cats_dir = os.path.join(validation_dir, 'cats')

# Directory with our validation dog pictures
validation_dogs_dir = os.path.join(validation_dir, 'dogs')

train_cat_fnames = os.listdir(train_cats_dir)
print(train_cat_fnames[:10])

train_dog_fnames = os.listdir(train_dogs_dir)
train_dog_fnames.sort()
print(train_dog_fnames[:10])

#downloading the wieghts of the Inception model
!wget --no-check-certificate \
    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \
    -O /tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5

#importing weights of the Inception model
from tensorflow.keras.applications.inception_v3 import InceptionV3

#Weights file path
load_weights_file = '/tmp/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'
#pretarained model
pretrained_model = InceptionV3(input_shape=(150, 150, 3),
                              include_top = False, weights=None)
#loading the weights
pretrained_model.load_weights(load_weights_file)

"""include_top=False argument, we load a network that doesn't include the classification layers at the topâ€”ideal for feature extraction."""

#making the model non trainable. We do not need to update the weights of the model
for layer in pretrained_model.layers:
  layer.trainable = False

#getting the mixed7 layer
last_layer = pretrained_model.get_layer('mixed7')
print('Last layer output shape: {}'.format(last_layer.output_shape))
last_output = last_layer.output

#Sticking a fully connected classifier on top of the last model
from tensorflow.keras.optimizers import RMSprop

#Flatten the output to 1 dimension
x = layers.Flatten()(last_output)

#Fully connected dense layer with 1024 nodes and ReLu activation
x = layers.Dense(1024, activation='relu')(x)

#Add a dropout of rate 0.2
x = layers.Dropout(0.2)(x)

#Adding one output layer with sigmoid activation
x = layers.Dense(1, activation='sigmoid')(x)

#configuring the model
model = Model(pretrained_model.input, x)
model.compile(loss='binary_crossentropy',
             optimizer=RMSprop(lr=0.0001),
             metrics=['acc'])

#adding the data augmentation parameters to the ImageDataGenerator
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# training data validator
train_datagen = ImageDataGenerator(rescale=1./255,
                            rotation_range=40,
                            width_shift_range=0.2,
                            height_shift_range=0.2,
                            zoom_range=0.2,
                            shear_range=0.2,
                            horizontal_flip=True)

#train data should not be augmented
test_datagen = ImageDataGenerator(rescale=1./255)

#train data generators
train_generator = train_datagen.flow_from_directory(
                  train_dir, #source directory containing training data
                  target_size=(150,150),
                  batch_size=20,
                  class_mode='binary')

# Flow validation images in batches of 20 using test_datagen generator
validation_generator = test_datagen.flow_from_directory(
        validation_dir,
        target_size=(150, 150),
        batch_size=20,
        class_mode='binary')

#Training the model
history = model.fit_generator(train_generator,
                              steps_per_epoch=100,
                              epochs=2,
                              validation_data = validation_generator,
                              validation_steps = 50,
                              verbose=2)

"""# Further Improving Accuracy with Fine-Tuning"""

from tensorflow.keras.optimizers import SGD

unfreeze = False

for layer in pretrained_model.layers:
  if unfreeze:
    layer.trainable = True
  if layer.name == 'mixed6':
    unfreeze = True
    
#using SGD optimizer with very low LR = 0.00001
model.compile(loss='binary_crossentropy',
             optimizer = SGD(lr=0.00001, momentum=0.9),
             metrics=['acc'])

#Retraining the model
history = model.fit_generator(train_generator,
                             steps_per_epoch=100,
                             epochs=50,
                             validation_data=validation_generator,
                             validation_steps=50,
                             verbose=2)

# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Retrieve a list of accuracy results on training and test data
# sets for each training epoch
acc = history.history['acc']
val_acc = history.history['val_acc']
  
# Retrieve a list of list results on training and test data
# sets for each training epoch
loss = history.history['loss']
val_loss = history.history['val_loss']

# Get number of epochs
epochs = range(len(acc))

# Plot training and validation accuracy per epoch
plt.plot(epochs, acc)
plt.plot(epochs, val_acc)
plt.title('Training and validation accuracy')

plt.figure()

# Plot training and validation loss per epoch
plt.plot(epochs, loss)
plt.plot(epochs, val_loss)
plt.title('Training and validation loss')

